"use strict";
/*
    app.js, main Angular application script
    define your module and controllers here
*/

angular.module('CommentApp', ['ui.bootstrap'])
    .config(function($httpProvider) {
        //Parse required two extra headers sent with every HTTP request: X-Parse-Application-Id, X-Parse-REST-API-Key
        //the first needs to be set to your application's ID value
        //the second needs to be set to your application's REST API key
        //both of these are generated by Parse when you create your application via their web site
        //the following lines will add these as default headers so that they are sent with every
        //HTTP request we make in this application
        $httpProvider.defaults.headers.common['X-Parse-Application-Id'] = 'RctFnIsvfulNHvZ7Dw5LMXL3wykwOdMaDAsSDfYe';
        $httpProvider.defaults.headers.common['X-Parse-REST-API-Key'] = 'kePnkaGDVGZQJcUTGDxikBolSL4wKKlQTf6iA2tA';
    })

    .controller('AjaxController', function($scope, $http) {
        var commentsUrl = 'https://api.parse.com/1/classes/comments';

        //refresh page, ordered by score (DESC)
        $scope.refreshComments = function () {
            //get all comments
            $scope.loading = true;
            $http.get(commentsUrl + '?order=-score')
                .success(function (responseData) {
                    //when returning a list of data, Parse will always return an
                    //object with one property called 'results', which will contain an
                    //array containing all the data objects
                    $scope.comments = responseData.results;

                })
                .error(function (err) {
                    console.log(err);
                    //notify user in some way
                })
                .finally(function () {
                    $scope.loading = false;
                });
            $scope.sortReverse = 'score';
        }; //$scope.refreshComments()

        //call refreshComments() to get the initial set of tasks on page load
        $scope.refreshComments();

        //initialize a new task object on the scope for the new task form
        $scope.newComment = {
            score: 0
        };

        //function to add a new task to the list
        $scope.addComment = function (comment) {
            $scope.inserting = true;
            $scope.loading = true;
            $http.post(commentsUrl, comment)
                .success(function (responseData) {
                    //Parse will return the new objectId in the response data
                    //copy that to the task we just inserted
                    comment.objectId = responseData.objectId;

                    //and add that task to our task list
                    $scope.comments.push(comment);

                })
                .error(function (err) {
                    console.log(err);
                    //report to user in some way
                })
                .finally(function () {
                    $scope.inserting = false;
                    $scope.loading = false;

                    //reset newTask to clear the form
                    //$scope.comment = {done: false};
                    $scope.newComment = {score: 0};
                });
        };

        //function to update existing comment
        $scope.updateComment = function(comment) {
            $scope.updating = true;
            $http.put(commentsUrl + '/' + comment.objectId, comment)
                .success(function(responseData) {
                    //nothing we really need to do since local object is already up-to-date
                })
                .error(function(err) {
                    console.log(err);
                    //notify user in some way
                })
                .finally(function() {
                    $scope.updating = false;
                })
        };

        //function to increment/decrement scores
        $scope.incrementScores = function(comment, amount) {
            if ((comment.score >= 0 && amount == 1) || (comment.score >= 1 && amount == -1)) {
                var postData = {
                    score: {
                        __op: "Increment",
                        amount: amount
                    }
                };

                $scope.updating = true;
                $http.put(commentsUrl + '/' + comment.objectId, postData)
                    .success(function (respData) {
                        //comment.score = respData.score;
                        console.log("increment score");
                    })
                    .error(function (err) {
                        console.log(err);
                    })
                    .finally(function () {
                        comment.score += amount;
                        $scope.updating = false;
                    });
            }
        }; //increment scores

        $scope.removeComment = function(comment) {
            $scope.deleting = true;
            $http.delete(commentsUrl + "/" + comment.objectId, comment)
                .success(function() {
                    $scope.refreshComments();
                })
                .error(function(err) {
                    console.log(err);
                })
                .finally(function() {
                    $scope.deleting = false;
                })
        }; //remove a comment

        $scope.sortBy = function(sortReverse) {
          $scope.sortReverse = sortReverse;
        };

    }); //comment controller

